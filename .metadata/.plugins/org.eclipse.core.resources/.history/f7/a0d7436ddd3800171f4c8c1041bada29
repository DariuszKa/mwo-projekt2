package pl.edu.agh.ki.mwo.web.controllers;

import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import pl.edu.agh.ki.mwo.model.User;
import pl.edu.agh.ki.mwo.persistence.UserDatabase;

@Controller
public class UserController{

    @RequestMapping(value="/Users")
    public String listUsers(Model model, HttpSession session) 
    {    		
    	if (session.getAttribute("userLogin") == null)
    		return "redirect:/Login";
    	
    	model.addAttribute("users", UserDatabase.getInstance().getUsers());
    	
        return "listUsers";    
    }
    
    @RequestMapping(value="/Prelegents")
    public String listPrelegents(Model model, HttpSession session) 
    {    		
    	if (session.getAttribute("userLogin") == null)
    		return "redirect:/Login";
    	
    	model.addAttribute("users", UserDatabase.getInstance().getUsers());
    	
        return "listPrelegents";    
    }
    
    @RequestMapping(value="/Recenzents")
    public String listRecenzents(Model model, HttpSession session) 
    {    		
    	if (session.getAttribute("userLogin") == null)
    		return "redirect:/Login";
    	
    	model.addAttribute("users", UserDatabase.getInstance().getUsers());
    	
        return "listRecenzents";    
    }
    
    @RequestMapping(value="/AddUser")
    public String displayAddUserForm(Model model, HttpSession session) 
    {    	
    	if (session.getAttribute("userLogin") == null)
    		return "redirect:/Login";
    	
        return "userForm";    
    }

    //@RequestMapping(value="/CreateUser", method=RequestMethod.POST)
    @RequestMapping(value="/CreateUser", method=RequestMethod.POST)
    public String createUser(
    		@RequestParam(value="userName", required=true) String name,
    		@RequestParam(value="userSurname", required=true) String surname,
    		@RequestParam(value="userSex", required=false) String sex,
    		@RequestParam(value="userAge", required=false) String age,
    		@RequestParam(value="userPrelegent", required=false) String prelegent,
    		@RequestParam(value="userRecenzent", required=false) String recenzent,
    		@RequestParam(value="userAdministrator", required=false) String admin,
    		@RequestParam(value="userPassword1", required=true) String password1,
    		@RequestParam(value="userPassword2", required=true) String password2,
    		Model model, HttpSession session) 
    {    	
    	if (session.getAttribute("userLogin") == null)
    		return "redirect:/Login";
    	
    	if(name.length()<2){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Za krótkie imię! Nowy użytkownik nie został dodany");
    		return "listUsers";
    	}
    		
    	if(surname.length()<2){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Za krótkie nazwisko! Nowy użytkownik nie został dodany");
    		return "listUsers";
    	}
    	
    	if(!prelegent.equals("yes") && !prelegent.equals("no")){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Nie określono czy jest prelegentem! Nowy użytkownik nie został dodany");
    		return "listUsers";
    	}
    	
    	if(!recenzent.equals("yes") && !recenzent.equals("no")){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Nie określono czy jest recenzentem! Nowy użytkownik nie został dodany");
    		return "listUsers";
    	}
    	
    	if(!admin.equals("yes") && !admin.equals("no")){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Nie określono czy jest administratorem! Nowy użytkownik nie został dodany");
    		return "listUsers";
    	}
    	
    	if(Integer.parseInt(age)<18){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Za młody! Nowy użytkownik nie został dodany");
    		return "listUsers";
    	}
    	if(Integer.parseInt(age)>100){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Za stary! Nowy użytkownik nie został dodany");
    		return "listUsers";
    	}
    	
    	if(password1.length()<5){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Za krótkie hasło! Wymagane co najmniej 5 znaków");
    		return "listUsers";
    	}
    	if(!password1.equals(password2)){
    		model.addAttribute("users", UserDatabase.getInstance().getUsers());
    		model.addAttribute("message", "Wpisano różne hasła! Spróbuj ponownie");
    		return "listUsers";
    	}
    	
    	UserDatabase.getInstance().addUser(new User(name, surname, sex, age, prelegent, recenzent, admin, password1));    	
       	model.addAttribute("users", UserDatabase.getInstance().getUsers());
    	model.addAttribute("message", "Sukces! Nowy użytkownik został dodany");
    	return "listUsers";
    	
    }


}